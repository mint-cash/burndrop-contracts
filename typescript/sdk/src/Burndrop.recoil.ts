/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { selectorFamily } from 'recoil';
import { cosmWasmClient } from './chain';
import {
  Uint128,
  InstantiateMsg,
  ExecuteMsg,
  QueryMsg,
  Addr,
  Config,
  Decimal,
  PriceResponse,
  SimulateBurnResponse,
  UserInfoResponse,
} from './Burndrop.types';
import { BurndropQueryClient } from './Burndrop.client';
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<
  BurndropQueryClient,
  QueryClientParams
>({
  key: 'burndropQueryClient',
  get:
    ({ contractAddress }) =>
    ({ get }) => {
      const client = get(cosmWasmClient);
      return new BurndropQueryClient(client, contractAddress);
    },
});
export const configSelector = selectorFamily<
  Config,
  QueryClientParams & {
    params: Parameters<BurndropQueryClient['config']>;
  }
>({
  key: 'burndropConfig',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams));
      return await client.config(...params);
    },
});
export const userInfoSelector = selectorFamily<
  UserInfoResponse,
  QueryClientParams & {
    params: Parameters<BurndropQueryClient['userInfo']>;
  }
>({
  key: 'burndropUserInfo',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams));
      return await client.userInfo(...params);
    },
});
export const currentPriceSelector = selectorFamily<
  PriceResponse,
  QueryClientParams & {
    params: Parameters<BurndropQueryClient['currentPrice']>;
  }
>({
  key: 'burndropCurrentPrice',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams));
      return await client.currentPrice(...params);
    },
});
export const simulateBurnSelector = selectorFamily<
  SimulateBurnResponse,
  QueryClientParams & {
    params: Parameters<BurndropQueryClient['simulateBurn']>;
  }
>({
  key: 'burndropSimulateBurn',
  get:
    ({ params, ...queryClientParams }) =>
    async ({ get }) => {
      const client = get(queryClient(queryClientParams));
      return await client.simulateBurn(...params);
    },
});
