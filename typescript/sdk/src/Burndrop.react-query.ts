/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "react-query";
import { Uint128, InstantiateMsg, ExecuteMsg, QueryMsg, Addr, Config, Decimal, PriceResponse, SimulateBurnResponse, UserInfoResponse } from "./Burndrop.types";
import { BurndropQueryClient } from "./Burndrop.client";
export interface BurndropReactQuery<TResponse, TData = TResponse> {
  client: BurndropQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface BurndropSimulateBurnQuery<TData> extends BurndropReactQuery<SimulateBurnResponse, TData> {
  args: {
    amount: Uint128;
  };
}
export function useBurndropSimulateBurnQuery<TData = SimulateBurnResponse>({
  client,
  args,
  options
}: BurndropSimulateBurnQuery<TData>) {
  return useQuery<SimulateBurnResponse, Error, TData>(["burndropSimulateBurn", client.contractAddress, JSON.stringify(args)], () => client.simulateBurn({
    amount: args.amount
  }), options);
}
export interface BurndropCurrentPriceQuery<TData> extends BurndropReactQuery<PriceResponse, TData> {}
export function useBurndropCurrentPriceQuery<TData = PriceResponse>({
  client,
  options
}: BurndropCurrentPriceQuery<TData>) {
  return useQuery<PriceResponse, Error, TData>(["burndropCurrentPrice", client.contractAddress], () => client.currentPrice(), options);
}
export interface BurndropUserInfoQuery<TData> extends BurndropReactQuery<UserInfoResponse, TData> {
  args: {
    address: string;
  };
}
export function useBurndropUserInfoQuery<TData = UserInfoResponse>({
  client,
  args,
  options
}: BurndropUserInfoQuery<TData>) {
  return useQuery<UserInfoResponse, Error, TData>(["burndropUserInfo", client.contractAddress, JSON.stringify(args)], () => client.userInfo({
    address: args.address
  }), options);
}
export interface BurndropConfigQuery<TData> extends BurndropReactQuery<Config, TData> {}
export function useBurndropConfigQuery<TData = Config>({
  client,
  options
}: BurndropConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["burndropConfig", client.contractAddress], () => client.config(), options);
}